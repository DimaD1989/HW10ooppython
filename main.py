# üìå–î–æ—Ä–∞–±–æ—Ç–∞–µ–º –∑–∞–¥–∞—á–∏ 5-6. –°–æ–∑–¥–∞–π—Ç–µ –∫–ª–∞—Å—Å-—Ñ–∞–±—Ä–∏–∫—É. ‚óã–ö–ª–∞—Å—Å –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ç–∏–ø –∂–∏–≤–æ—Ç–Ω–æ–≥–æ (–Ω–∞–∑–≤–∞–Ω–∏–µ –æ–¥–Ω–æ–≥–æ –∏–∑ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∫–ª–∞—Å—Å–æ–≤) –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —ç—Ç–æ–≥–æ —Ç–∏–ø–∞.
# ‚óã–í–Ω—É—Ç—Ä–∏ –∫–ª–∞—Å—Å–∞ —Å–æ–∑–¥–∞–π—Ç–µ —ç–∫–∑–µ–º–ø–ª—è—Ä –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ –∏ –≤–µ—Ä–Ω–∏—Ç–µ –µ–≥–æ –∏–∑ –∫–ª–∞—Å—Å–∞-—Ñ–∞–±—Ä–∏–∫–∏.
# []
# üìå–í–æ–∑—å–º–∏—Ç–µ 1-3 –ª—é–±—ã–µ –∑–∞–¥–∞—á–∏ –∏–∑ –ø—Ä–æ—à–ª—ã—Ö —Å–µ–º–∏–Ω–∞—Ä–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö), –∫–æ—Ç–æ—Ä—ã–µ –≤—ã —É–∂–µ —Ä–µ—à–∞–ª–∏. –ü—Ä–µ–≤—Ä–∞—Ç–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏–∏ –≤ –º–µ—Ç–æ–¥—ã –∫–ª–∞—Å—Å–∞, –∞ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ —Å–≤–æ–π—Å—Ç–≤–∞.
# –ó–∞–¥–∞—á–∏ –¥–æ–ª–∂–Ω—ã —Ä–µ—à–∞—Ç—å—Å—è —á–µ—Ä–µ–∑ –≤—ã–∑–æ–≤ –º–µ—Ç–æ–¥–æ–≤ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞.
import random


class Animal:
    def __init__(self, name: str = None, breed: str = 'unknown', age: int = 0):
        self.name = name
        self.breed = breed
        self.age = age

    def print_specific(self):
        return f'–°–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ'

    def __eq__(self, other):
        """__eq__(self, other) - –ø–æ–≤–µ–¥–µ–Ω–∏—è –ø—Ä–∏ =="""
        return self.name == other.name

    def __gt__(self, other):
        """"__gt__(self, other) - –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø–æ–≤–µ–¥–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –±–æ–ª—å—à–µ >"""
        return self.name > other.name

    def __lt__(self, other):
        """__lt__(self, other) - –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø–æ–≤–µ–¥–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –º–µ–Ω—å—à–µ <"""
        return self.name < other.name


class Predatory(Animal):
    def __init__(self, name: str = None, breed: str = 'unknown', count_flights: int = 0):
        super().__init__(name, breed)
        # self.name = name
        # self.breed = breed
        self.count_flights = count_flights

    def print_specific(self):
        return f'Predatory: {self.name}'


class Primates(Animal):
    def __init__(self, name: str = None, breed: str = 'unknown', commands: list[str] = 'unknown'):
        super().__init__(name, breed)
        # self.name = name
        # self.breed = breed
        self.commands = commands

    def print_specific(self):
        return f'Primates: {self.name}'


class Rodents(Animal):
    def __init__(self, name: str = None, breed: str = 'unknown', count_fins: int = 0):
        super().__init__(name, breed)
        # self.name = name
        # self.breed = breed
        self.count_fins = count_fins

    def print_specific(self):
        return f'Rodents: {self.name}'


class AnimalPlant:
    available_classes = [Primates, Predatory, Rodents]
    max_size = 0

    list_of_animals = []
    current_size = 0

    def __init__(self, name, max_size):
        self.name = name
        self.max_size = max_size

    def create_animal(self, _class, *args, **kwargs):
        if self.current_size < self.max_size:
            if _class in self.available_classes:
                index = self.available_classes.index(_class)
                animal = self.available_classes[index](*args, **kwargs)
                self.list_of_animals.append(animal)
                self.current_size += 1

                return animal
            else:
                raise ValueError
        else:
            print("–õ–∏–º–∏—Ç –∏—Å—á–µ—Ä–ø–∞–Ω")

    def __str__(self):
        res_list = ""
        for i in self.list_of_animals:
            res_list += i.print_specific() + "\n"
        return res_list

    def born(self, mother, father):

        if type(mother) == type(father):
            child_name = f"{mother.name[:len(mother.name) // 2]}{father.name[len(father.name) // 2:]}"

            child_breed = random.choice([mother.breed, father.breed])

            if type(mother) == Primates:
                child_commands = mother.commands.append(father.commands)
                self.create_animal(Primates, child_name, child_breed, child_commands)

            elif type(mother) == Predatory:
                child_count_flights = random.choice([mother.count_flights, father.count_flights])
                self.create_animal(Predatory, child_name, child_breed, child_count_flights)


            elif type(mother) == Rodents:
                child_count_fins = random.choice([mother.counts_flights, father.counts_flights])
                self.create_animal(Rodents, child_name, child_breed, child_count_fins)


        else:
            print("–¢–∞–∫ –Ω–µ–ª—å–∑—è")

    def sort_animals(self):
        return self.list_of_animals.sort()


f = AnimalPlant("new", 10)
a = f.create_animal(Primates, 'Hulk', 'chimpanzee', ['YYYY', 'Run'])
b = f.create_animal(Predatory, 'Shark', 'Klach', 4)

c = f.create_animal(Predatory, 'Wolf', 'hare', 2)
d = f.create_animal(Rodents, 'Gopher', 'Cloun', 4)
e = f.born(b, c)

f.sort_animals()

print(type(a) == f.available_classes[0])

print(f)